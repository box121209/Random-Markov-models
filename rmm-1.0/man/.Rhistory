cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( exp(-2)*(exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( exp(-2)*(exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( exp(-2)*(exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( exp(-1)*(exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( exp(2)*(exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( exp(1)*(exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
b <- 1 + runif(1)
y <- seq(from=0,to=1,by=0.01)
cond <- ( abs(B-b) < 0.01 )
hist(Y[cond], probability=TRUE, xlim=c(0,1),
main=sprintf("B = %g, nr points = %d", b, length(Y[cond])))
R <- sapply(y, function(yy){ max(b, 2-yy) })
#points( exp(-b) * (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
points( (exp(2) - exp(R) + sapply(R,Ei) - Ei(2))  ~ y, type='l', col='red', lwd=2)
(1 + 14*exp(1) - 5*exp(2)/4
(1 + 14*exp(1) - 5*exp(2))/4
# we want to give an analytical derivation of this and compute the
# probability with more precision than is possible with simulation alone...
''''
(1 + 14*exp(1) - 5*exp(2))/4
1 - (1 + 14*exp(1) - 5*exp(2))/4
sum(X>Y)/nexpts
n <- 1000
s <- sample(n,n, replace=FALSE)
score <- matrix(nrow=n, ncol=n, 1)
last <- matrix(nrow=n, ncol=n, rep(1:n, n))
for(i in 2:n){
for(j in 1:s[i-1]) {
last[j,i] <- j
score[j,i] <- score[j,i-1]
}
if(s[i-1] == n) next
for(j in (s[i-1]+1):n){
if(score[s[i-1],i-1]+1 > score[j,i-1]){
last[j,i] <- s[i-1]
score[j,i] <- score[s[i-1],i-1] + 1
} else {
last[j,i] <- j
score[j,i] <- score[j,i-1]
}
}
}
t <- sapply(1:n, function(i){ score[s[i],i] })
start <- which(t==max(t))
len <- max(t)
path <- list()
count <- 1
for(i in start){
j <- s[i]
p <- c()
while(i > 0){
if(last[j,i] != j | i==1) p <- c(p, j)
j <- last[j,i]
i <- i-1
}
path[[count]] <- rev(p)
count <- count + 1
}
s
len
path
n <- 1000
s <- sample(n,n, replace=FALSE)
score <- matrix(nrow=n, ncol=n, 1)
last <- matrix(nrow=n, ncol=n, rep(1:n, n))
for(i in 2:n){
for(j in 1:s[i-1]) {
last[j,i] <- j
score[j,i] <- score[j,i-1]
}
if(s[i-1] == n) next
for(j in (s[i-1]+1):n){
if(score[s[i-1],i-1]+1 > score[j,i-1]){
last[j,i] <- s[i-1]
score[j,i] <- score[s[i-1],i-1] + 1
} else {
last[j,i] <- j
score[j,i] <- score[j,i-1]
}
}
}
t <- sapply(1:n, function(i){ score[s[i],i] })
start <- which(t==max(t))
len <- max(t)
path <- list()
count <- 1
for(i in start){
j <- s[i]
p <- c()
while(i > 0){
if(last[j,i] != j | i==1) p <- c(p, j)
j <- last[j,i]
i <- i-1
}
path[[count]] <- rev(p)
count <- count + 1
}
s
len
path
?gcd
5%3
5%%3
gcd <- function(a,b) if(b==0) a else gcd(b%%a, a)
gcd(344, 56)
gcd(344, 5)
gcd <- function(a,b) if(a==0) b else gcd(a %% b, b)
gcd(344, 5)
gcd <- function(a,b) if(a==0) b else if(b==0) a else gcd(a %% b, b)
gcd(344, 5)
344 %% 5
5 %% 4
4 %% 1
gcd <- function(a,b) if(a==0) b else gcd(b %% a, a)
gcd(344, 5)
gcd(5, 344)
?ls
gcd <- function(a,b) if(a==0) b else gcd(b %% a, a)
n <- 4; s <- 14
s.all <- c(s)
n <- 4; s <- 14
s.all <- c(s)
for(n in 5:100){
s <- s + gcd(n, s)
s.all <- c(s.all, s)
}
s.all
plot(s.all)
gcd <- function(a,b) if(a==0) b else gcd(b %% a, a)
n <- 4; s <- 14
s.all <- c(s)
for(n in 5:1000){
s <- s + gcd(n, s)
s.all <- c(s.all, s)
}
plot(s.all)
s.al[-1]
s.all[-1]
s.all
for(n in 5:10000){
s <- s + gcd(n, s)
s.all <- c(s.all, s)
}
plot(s.all)
for(n in 5:100000){
s <- s + gcd(n, s)
s.all <- c(s.all, s)
}
plot(s.all)
n <- 4; s <- 14
s.all <- c(s)
for(n in 5:10000){
g <- gcd(n, s)
s <- s + g
if(g > 1) print(c(n,g))
s.all <- c(s.all, s)
}
steps <- matrix(ncol=2, nrow=0)
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:100000){
g <- gcd(n, s)
s <- s + g
if(g > 1) sterps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:20000){
g <- gcd(n, s)
s <- s + g
if(g > 1) sterps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
steps
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:20000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
steps
plot(steps)
plot(steps, log='xy')
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:20000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(s.all, log='xy', col='blue')
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:50000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
steps <- matrix(ncol=2, nrow=0)
for(n in 5:100000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
steps <- matrix(ncol=2, nrow=0)
for(n in 5:500000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
steps <- matrix(ncol=2, nrow=0)
for(n in 5:50000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
steps
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:5000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
n <- 4; s <- 14
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:50000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
steps
s.all[1000-4]
s.all[1000-3]
n <- 4; s <- 13
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:50000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
s.all[1000-3]
plot(s.all, log='xy', col='blue')
steps
n <- 41
for(i in 1:10){ n <- 2*n + 1; print(n) }
steps[steps[,1]==steps[,2],1]
q <- steps[steps[,1]==steps[,2],1]
q
diff(q)
diff(diff(q))
diff(diff(diff(q)))
q
len <- length(q)
len
q/2^(1:len)
q/2^(1+1:len)
q/2^(2+1:len)
points(s.all[3+q] ~ q, col='red')
points(s.all[3+q] ~ q, col='red', pch=19)
s.all[3+q]s.all[3+q]
s.all[3+q]
s.all[3+1]
s.all[3+]
s.all[3]
s.all
s.all[1]
points(s.all[q-3] ~ q, col='red', pch=19)
q[1]
s.all[1]
steps
q <- steps[steps[,1]==steps[,2],1]
q
plot(s.all, log='xy', col='blue')
s.all[1:10]
points(s.all[q-3] ~ q, pch=19, col='red')
s.all[q-3]
s.all[q-3]/q
n <- 4; s <- 13
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:80000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
plot(s.all, log='xy', col='blue')
q <- steps[steps[,1]==steps[,2],1]
points(s.all[q-3] ~ q, pch=19, col='red')
s.all[q-3] / q
q
len <- length(q)
q - 2^(2 + 1:len)
qqq <- qq - 2^(1:len)
qq <- q - 2^(2 + 1:len)
qqq <- qq - 2^(1:len)
qqq
qq
qqqq <- qqq - 2^(1:len - 2)
qqqq
qqqqq <- qqqq - 2(1:len - 4)
qqqqq <- qqqq - 2^(1:len - 4)
qqqqq
q
diff(q)
diff(q)/4
diff(q)/2
?diff
?cumsum
cumsum(q)
q
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
q
diff(q)
qq
diff(qq)
steps
steps
q
qq
qqq
422.5 * 166
255.6 * 153
477.2 * 40
gcd <- function(a,b) if(a==0) b else gcd(b %% a, a)
n <- 4; s <- 13
s.all <- c(s)
steps <- matrix(ncol=2, nrow=0)
for(n in 5:80000){
g <- gcd(n, s)
s <- s + g
if(g > 1) steps <- rbind(steps, c(n,g))
s.all <- c(s.all, s)
}
plot(steps, log='xy', col='blue')
plot(s.all, log='xy', col='blue')
q <- steps[steps[,1]==steps[,2],1]
points(s.all[q-3] ~ q, pch=19, col='red')
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?rstudio
# Created by NJG on Saturday, September 14, 2013
# SATURN constants
z    = 0.00620
P    = exp(4.885683 * log(10))
sd   = sqrt(1/(2*P))
pSat = 11327 / 11328
# Msat is expressed as solar mass fraction
Fnorm <- function(x) { sqrt(P/pi) * exp(-P * x^2) }
# Numerically integrate the normal dsn
U     <- 1/100
prob  <- integrate(Fnorm, -U, U)
# Compare the probabilities
print(prob)
print(pSat)
# Plot the posterior dsn
pts <- 1000
x <- seq(-U,U,length=pts)
plot(x, Fnorm(x), type="l",
xlab=expression(paste("Error in ", M[Sat])),
ylab=expression(paste("Posterior PDF for ", M[Sat]))
)
polygon(c(x,rev(x)), c(rep(0,pts),rev(Fnorm(x))), col=colors()[405])
abline(v=0)
abline(h=0, v=c(-sd,sd),col="gray")
abline(v=c(-U,U),col="blue",lty="dashed")
abline(v=c(-4*sd,4*sd),col="red")
HM   <- sqrt(P/pi)/2
HW <- uniroot(function(x) Fnorm(x) - HM, c(0,1))$root
sdHW <- 2 * HW / (2+1/3)
sdHH <- 1.2 * HM
lines(x=c(-HW, HW), y=c(HM,HM), col="blue", lwd=2)
abline(h=HM,lty="dotted")
lines(x=c(-sdHW, sdHW), y=c(sdHH, sdHH), col="red", lwd=2)
arrows(x0=0,x1=sd,y0=50,y1=50,length = 0.10)
text(x=sd/2, y=55, expression(sigma))
arrows(x0=0,x1=4*sd,y0=30,y1=30,length = 0.10)
text(x=4*sd/2, y=35, expression(4*sigma))
library(rmm)
library(rmmm)
library(rstudio)
library(rstudio)
library(rmm)
?library
library()
library(rmm)
library(rmm, verbose=TRUE)
library(Rcpp)
?.libPaths
.Library
.Library.site
.libPaths()
.libPaths()
